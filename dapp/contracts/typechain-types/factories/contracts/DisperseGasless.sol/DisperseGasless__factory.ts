/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DisperseGasless,
  DisperseGaslessInterface,
} from "../../../contracts/DisperseGasless.sol/DisperseGasless";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "disperseTokenSimple",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address",
      },
    ],
    name: "setTrustedForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e0f38038062000e0f833981810160405281019062000037919062000206565b620000576200004b6200006f60201b60201c565b6200008b60201b60201c565b62000068816200015160201b60201c565b5062000238565b6000620000866200019460201b620003851760201c565b905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ce82620001a1565b9050919050565b620001e081620001c1565b8114620001ec57600080fd5b50565b6000815190506200020081620001d5565b92915050565b6000602082840312156200021f576200021e6200019c565b5b60006200022f84828501620001ef565b91505092915050565b610bc780620002486000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d8578063ce1b815f146100f6578063da74222814610114578063f2fde38b146101305761007d565b806351ba162c14610082578063572b6c051461009e578063715018a6146100ce575b600080fd5b61009c60048036038101906100979190610825565b61014c565b005b6100b860048036038101906100b391906108b0565b61022e565b6040516100c591906108f8565b60405180910390f35b6100d6610287565b005b6100e061029b565b6040516100ed9190610922565b60405180910390f35b6100fe6102c5565b60405161010b9190610922565b60405180910390f35b61012e600480360381019061012991906108b0565b6102ee565b005b61014a600480360381019061014591906108b0565b610302565b005b60005b8251811015610228578373ffffffffffffffffffffffffffffffffffffffff166323b872dd338584815181106101885761018761093d565b5b60200260200101518585815181106101a3576101a261093d565b5b60200260200101516040518463ffffffff1660e01b81526004016101c99392919061097b565b6020604051808303816000875af11580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c91906109de565b61021557600080fd5b808061022090610a3a565b91505061014f565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61028f61038d565b610299600061040b565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102f661038d565b6102ff816104d1565b50565b61030a61038d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037090610b05565b60405180910390fd5b6103828161040b565b50565b600033905090565b610395610514565b73ffffffffffffffffffffffffffffffffffffffff166103b361029b565b73ffffffffffffffffffffffffffffffffffffffff1614610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040090610b71565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061051e610385565b905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061056282610537565b9050919050565b600061057482610557565b9050919050565b61058481610569565b811461058f57600080fd5b50565b6000813590506105a18161057b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105f5826105ac565b810181811067ffffffffffffffff82111715610614576106136105bd565b5b80604052505050565b6000610627610523565b905061063382826105ec565b919050565b600067ffffffffffffffff821115610653576106526105bd565b5b602082029050602081019050919050565b600080fd5b61067281610557565b811461067d57600080fd5b50565b60008135905061068f81610669565b92915050565b60006106a86106a384610638565b61061d565b905080838252602082019050602084028301858111156106cb576106ca610664565b5b835b818110156106f457806106e08882610680565b8452602084019350506020810190506106cd565b5050509392505050565b600082601f830112610713576107126105a7565b5b8135610723848260208601610695565b91505092915050565b600067ffffffffffffffff821115610747576107466105bd565b5b602082029050602081019050919050565b6000819050919050565b61076b81610758565b811461077657600080fd5b50565b60008135905061078881610762565b92915050565b60006107a161079c8461072c565b61061d565b905080838252602082019050602084028301858111156107c4576107c3610664565b5b835b818110156107ed57806107d98882610779565b8452602084019350506020810190506107c6565b5050509392505050565b600082601f83011261080c5761080b6105a7565b5b813561081c84826020860161078e565b91505092915050565b60008060006060848603121561083e5761083d61052d565b5b600061084c86828701610592565b935050602084013567ffffffffffffffff81111561086d5761086c610532565b5b610879868287016106fe565b925050604084013567ffffffffffffffff81111561089a57610899610532565b5b6108a6868287016107f7565b9150509250925092565b6000602082840312156108c6576108c561052d565b5b60006108d484828501610680565b91505092915050565b60008115159050919050565b6108f2816108dd565b82525050565b600060208201905061090d60008301846108e9565b92915050565b61091c81610557565b82525050565b60006020820190506109376000830184610913565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61097581610758565b82525050565b60006060820190506109906000830186610913565b61099d6020830185610913565b6109aa604083018461096c565b949350505050565b6109bb816108dd565b81146109c657600080fd5b50565b6000815190506109d8816109b2565b92915050565b6000602082840312156109f4576109f361052d565b5b6000610a02848285016109c9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a4582610758565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7757610a76610a0b565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610aef602683610a82565b9150610afa82610a93565b604082019050919050565b60006020820190508181036000830152610b1e81610ae2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b5b602083610a82565b9150610b6682610b25565b602082019050919050565b60006020820190508181036000830152610b8a81610b4e565b905091905056fea2646970667358221220b45dd3b541e1f4c154d9a9eb898b3d445bd2617f518436d747c9863b1f50785264736f6c63430008110033";

type DisperseGaslessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DisperseGaslessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DisperseGasless__factory extends ContractFactory {
  constructor(...args: DisperseGaslessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DisperseGasless> {
    return super.deploy(
      _trustedForwarder,
      overrides || {}
    ) as Promise<DisperseGasless>;
  }
  override getDeployTransaction(
    _trustedForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_trustedForwarder, overrides || {});
  }
  override attach(address: string): DisperseGasless {
    return super.attach(address) as DisperseGasless;
  }
  override connect(signer: Signer): DisperseGasless__factory {
    return super.connect(signer) as DisperseGasless__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DisperseGaslessInterface {
    return new utils.Interface(_abi) as DisperseGaslessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DisperseGasless {
    return new Contract(address, _abi, signerOrProvider) as DisperseGasless;
  }
}
